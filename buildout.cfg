# buildout.cfg file for Plone 4 development work
# - for production installations please use http://plone.org/download
# Each part has more information about its recipe on PyPi
# http://pypi.python.org/pypi 
# ... just reach by the recipe name
[buildout]
parts =  
    instance
    zopepy
    ipzope
    i18ndude
    zopeskel
    test
    omelette

extends = 
    http://dist.plone.org/release/4.1.4/versions.cfg
    http://good-py.appspot.com/release/dexterity/1.2?plone=4.1.4
    secret.cfg
    picked-versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.1.4
    http://dist.plone.org/thirdparty

extensions = 
    mr.developer
    buildout.dumppickedversions
#    buildout.threatlevel

sources = sources
	
versions = versions

# Reference any folders where you have Python egg source code under development here 
# e.g.: develop = src/my.package
# If you are using the mr.developer extension and have the source code in a 
# repository mr.developer will handle this automatically for you
develop =
    src/collective.giesing

auto-checkout = 

# Create bin/instance command to manage Zope start up and shutdown
[instance]
recipe = plone.recipe.zope2instance
http-address = 11080
debug-mode = on
verbose-security = on
blob-storage = var/blobstorage

eggs =
    ipdb
    Plone
    Pillow
    plone.reload
    Products.PDBDebugMode
    plone.app.dexterity
    collective.giesing

# Some pre-Plone 3.3 packages may need you to register the package name here in 
# order their configure.zcml to be run (http://plone.org/products/plone/roadmap/247)
# - this is never required for packages in the Products namespace (Products.*)
zcml =

# zopepy commands allows you to execute Python scripts using a PYTHONPATH 
# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

# an IPython Shell for interactive use with zope running.
# You also need to put
# https://svn.plone.org/svn/collective/dotipython/branches/plone4/
# ipy_profile_zope.py
# in your $HOME/.ipython directory for the following to work.
# You may have to remove an existing ipy_profile_zope.py: if you 
# get errors when running ./bin/ipzope, check the stack trace for that 
# filename to make sure the correct version is used. 
[ipzope]
recipe = zc.recipe.egg
eggs =
    ipython
    ${instance:eggs}
initialization =
    import sys, os
    os.environ["INSTANCE_HOME"] = "${instance:location}"
    sys.argv[1:1] = "-p zope".split()
scripts = ipython=ipzope

# create bin/i18ndude command
[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    ${instance:eggs}

# create ZopeSkel command
[zopeskel]
unzip = true
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    Paste
    PasteDeploy
    PasteScript
    zopeskel.dexterity<=2.99
    ${instance:eggs}

# symlinks all Python source code to parts/omelette folder when buildout is run
# windows users will need to install additional software for this part to build 
# correctly.  See http://pypi.python.org/pypi/collective.recipe.omelette for
# relevant details.
[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

# Put your mr.developer managed source code repositories here, see
# http://pypi.python.org/pypi/mr.developer for details on format for this part
[sources]
collective.developermanual = svn http://svn.plone.org/svn/collective/collective.developermanual

[checkversions]
recipe=zc.recipe.egg
eggs=z3c.checkversions [buildout]

