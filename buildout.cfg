[buildout]
parts =  
    instance
    zopepy
    ipzope
    i18ndude
    translation
    zopeskel
    test
    omelette

extends = 
    http://dist.plone.org/release/4.2.2/versions.cfg
    secret.cfg
    picked-versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.2.2
    http://dist.plone.org/thirdparty

extensions = 
    mr.developer
    buildout.dumppickedversions
#    buildout.threatlevel

sources = sources
sources-dir = src

versions = versions

# Reference any folders where you have Python egg source code under development here 
# e.g.: develop = src/my.package
# If you are using the mr.developer extension and have the source code in a 
# repository mr.developer will handle this automatically for you
develop =

auto-checkout = *

# Create bin/instance command to manage Zope start up and shutdown
[instance]
recipe = plone.recipe.zope2instance
http-address = 11080
debug-mode = on
verbose-security = on
blob-storage = var/blobstorage

eggs =
    ipdb
    Plone
    Pillow
    plone.reload
    Products.PDBDebugMode
    plone.app.themeeditor
# works only for markdown, and not very reliably
    collective.markitup
    collective.giesing
    giesing2060.theme
    Products.PloneHotfix20130618==1.1
    plone.formwidget.recaptcha

zcml =
    plone.app.themeeditor

environment-vars =
  PTS_LANGUAGES en de
  zope_i18n_allowed_languages en de
  zope_i18n_compile_mo_files true

# zopepy commands allows you to execute Python scripts using a PYTHONPATH 
# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

[ipzope]
# a IPython Shell for interactive use with zope running.
recipe = zc.recipe.egg
eggs =
    readline
    ipython
    ${instance:eggs}
initialization =
    import sys, os
    os.environ["SOFTWARE_HOME"] = " "
    os.environ["INSTANCE_HOME"] = "${instance:location}"
    os.environ["CONFIG_FILE"] = "${instance:location}/etc/zope.conf"
    os.environ["IPYTHONDIR"] = os.path.join("${buildout:directory}", "${buildout:sources-dir}", "slc.ipythonprofiles")
    sys.argv[1:1] = "--profile=zope".split()
scripts = ipython=ipzope
extra-paths =
    ${buildout:sources-dir}/slc.ipythonprofiles/profile_zope

# create bin/i18ndude command
[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    collective.giesing

# create ZopeSkel command
[zopeskel]
unzip = true
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    Paste
    PasteDeploy
    PasteScript
    zopeskel.dexterity<=2.99
    ${instance:eggs}

# symlinks all Python source code to parts/omelette folder when buildout is run
# windows users will need to install additional software for this part to build 
# correctly.  See http://pypi.python.org/pypi/collective.recipe.omelette for
# relevant details.
[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

# Put your mr.developer managed source code repositories here, see
# http://pypi.python.org/pypi/mr.developer for details on format for this part
[sources]
#collective.developermanual = git git@github.com:collective/collective.developermanual.git
collective.giesing = git git@neon-cathedral.net:collective.giesing branch=collectivegeo
giesing2060.theme = git git@neon-cathedral.net:giesing2060.theme
collective.geo.behaviour = git https://github.com/collective/collective.geo.behaviour.git rev=eb2c0bb96fbd22c0d871fbfe596c5b8e579cb8eb
collective.markitup = git git@github.com:collective/collective.markitup
slc.ipythonprofiles = git https://github.com/syslabcom/slc.ipythonprofiles.git egg=false

[checkversions]
recipe=zc.recipe.egg
eggs=z3c.checkversions [buildout]

[translation]
recipe = infrae.i18nextract
packages =
    collective.giesing
output = ${buildout:directory}/src/collective.giesing/collective/giesing/locales/
output-package = collective.giesing
domain = collective.giesing
